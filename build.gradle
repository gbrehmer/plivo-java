plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'idea'
    id 'eclipse'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

group = 'com.plivo'
version = new File("${projectDir}/src/main/resources/com/plivo/api/version.txt").readLines().get(0)

repositories {
    mavenCentral()
    gradlePluginPortal()
}

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-XDignore.symbol.file=true"
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
    
    testImplementation 'com.squareup.okhttp:mockwebserver:2.7.5'

    implementation 'com.squareup.retrofit2:converter-jackson:2.2.0'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
    implementation 'com.auth0:java-jwt:3.10.2'
}

checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        'checkstyle.cache.file': "${buildDir}/checkstyle.cache"
    ]
    showViolations = true
    sourceSets = [sourceSets.main, sourceSets.test]
    ignoreFailures = false
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    ignoreFailures = false
}

javadoc {
    title = "Plivo Java SDK"
    options.linkSource = true
}

jar {
    manifest {
        attributes(
            "Created-By": 'Plivo',
            'Implementation-Vendor': 'Plivo',
            'Implementation-Title': 'Plivo Java SDK',
            'Implementation-Version': version
        )
    }
}

shadowJar {
    archiveClassifier.set('all')
    archiveBaseName.set("plivo-java-${version}-jar-with-dependencies")
}

nexusStaging {
    numberOfRetries = 60
    delayBetweenRetriesInMillis = 40000
}

task createPom {
  doLast
 {
  pom {
    project {
      name 'plivo-java'
      packaging 'jar'
      description 'A Java SDK to make voice calls & send SMS using Plivo and to generate Plivo XML'

      licenses {
        license {
          name 'The MIT License'
          url 'https://github.com/plivo/plivo-java/blob/4.0/LICENSE.txt'
          distribution 'repo'
        }
      }

      developers {
        developer {
          name 'The Plivo SDKs Team'
          email 'sdks@plivo.com'
          organization 'Plivo, Inc.'
          organizationUrl 'https://plivo.com'
        }
      }

      scm {
        url 'git@github.com:plivo/plivo-java.git'
        connection 'scm:git:git@github.com:plivo/plivo-java.git'
        developerConnection 'scm:git:git@github.com:plivo/plivo-java.git'
      }
    }
  }.writeTo("pom.xml")
}
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            pom {
                name = 'plivo-java'
                packaging = 'jar'
                artifactId = 'plivo-java'
                description = 'A Java SDK to make voice calls & send SMS using Plivo and to generate Plivo XML'
                url = 'https://github.com/plivo/plivo-java/'

                scm {
                    connection = 'scm:git:git@github.com:plivo/plivo-java.git'
                    developerConnection = 'scm:git:git@github.com:plivo/plivo-java.git'
                    url = 'git@github.com:plivo/plivo-java.git'
                }

                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://github.com/plivo/plivo-java/blob/4.0/LICENSE.txt'
                    }
                }

                organization {
                    name = 'Plivo'
                    url = 'https://api-reference.plivo.com/latest/net/introduction/overview'
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/plivo/plivo-java/issues'
                }

                developers {
                    developer {
                        name = 'The Plivo SDKs Team'
                        email = 'sdks@plivo.com'
                        organization = 'Plivo, Inc.'
                        organizationUrl = 'https://plivo.com'
                    }
                }
            }
        }
    }
    
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            
            credentials {
                username = System.getenv("MAVEN_USERNAME") ?: project.findProperty('mavenUserName') ?: ''
                password = System.getenv("MAVEN_PASSWORD") ?: project.findProperty('mavenPassword') ?: ''
            }
        }
    }
}

signing {
    required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

application {
    mainClass = 'com.plivo.examples.Messages'
}
